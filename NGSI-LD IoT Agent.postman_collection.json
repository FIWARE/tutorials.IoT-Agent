{
	"info": {
		"_postman_id": "440d42df-16d5-4da2-9a24-c7def3f674a4",
		"name": "NGSI-LD IoT Agent",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Connecting IoT Devices",
			"item": [
				{
					"name": "IoT Agent - Obtain Version Information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{iot-agent}}/iot/about",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"about"
							]
						},
						"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
					},
					"response": []
				},
				{
					"name": "IoT Agent - Create a Service Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"services\": [\n    {\n      \"apikey\": \"4jggokgpepnvsb2uv4s40d59ov\",\n      \"cbroker\": \"http://orion:1026\",\n      \"entity_type\": \"Device\",\n      \"resource\": \"/iot/d\",\n      \"expressionLanguage\": \"jexl\",\n      \"attributes\": [\n        {\n          \"object_id\":\"heartRate\",\n          \"type\":\"Property\",\n          \"name\": \"bpm\"\n        },\n        {\n          \"object_id\": \"s\",\n          \"name\": \"status\",\n          \"type\": \"Property\"\n        },\n        {\n          \"object_id\": \"l\",\n          \"name\": \"location\",\n          \"type\": \"GeoProperty\"\n        },\n        {\n          \"object_id\": \"y\",\n          \"name\": \"longitude\",\n          \"type\": \"Property\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							]
						},
						"description": "Invoking group provision is always the the first step in connecting devices since it is always necessary to\nsupply an authentication key with each measurement and the IoT Agent will not initially know which URL \nthe context broker is responding on.\n\nIt is possible to set up default commands and attributes for all devices as well, but this\nis not done within this tutorial as we will be provisioning each device separately.\n\nThis example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices\nwill be sending messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)\n\nIn the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate\nthemselves by including the token `4jggokgpepnvsb2uv4s40d59ov`. For an UltraLight IoT Agent this means devices will\nbe sending GET or POST requests to: \n\n```\nhttp://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov\n```\n\nWhich should be familiar UltraLight 2.0 syntax from the previous tutorial.\n\nWhen a measurement from an IoT device is received on the resource url it needs to be \ninterpreted and passed to the context broker. The `entity_type` attribute provides a\ndefault `type` for each device which has made a  request (in this case anonymous devices\nwill be known as `Thing` entities. Furthermore the location of the\ncontext broker (`cbroker`) is needed, so that the IoT Agent can pass on any measurements \nreceived to the  correct URL. `cbroker` is an optional attribute - if it is not provided, \nthe IoT Agent uses the context broker URL as defined in the configuration file, however\nit has been included here for completeness."
					},
					"response": []
				},
				{
					"name": "IoT Agent - Provision a Sensor",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"temperature001\",\n      \"entity_name\": \"urn:ngsi-ld:TemperatureSensor:001\",\n      \"entity_type\": \"TemperatureSensor\",\n      \"timezone\": \"Europe/Berlin\",\n      \"attributes\": [\n        {\n          \"object_id\": \"t\",\n          \"name\": \"temperature\",\n          \"type\": \"Property\",\n          \"metadata\": {\n            \"unitCode\": {\n              \"type\": \"Text\",\n              \"value\": \"CEL\"\n            }\n          }\n        }\n      ],\n      \"static_attributes\": [\n        {\n          \"name\": \"controlledAsset\",\n          \"type\": \"Relationship\",\n          \"value\": \"urn:ngsi-ld:Building:barn001\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "It is common good practice to use URNs following the NGSI-LD [draft recommendation](https://docbox.etsi.org/ISG/CIM/Open/ISG_CIM_NGSI-LD_API_Draft_for_public_review.pdf) when creating entities. Furthermore it is easier to understand\nmeaningful names when defining data attributes. These mappings can be defined by provisioning a device individually.\n\nThree types of meaasurement attributes can be provisioned:\n\n* `attributes` are active readings from the device\n* `lazy` attributes are only sent on request -  The IoT Agent will inform the device to return the measurement\n* `static_attributes` are as the name suggests static data about the device (such as relationships) passed on \n  to the context broker.\n\n>**Note**: in the case where individual `id`s are not required, or aggregated data is sufficient \n> the `attributes` can be defined within the provisioning service rather than individually.\n\nIn the request we are assiociating the device `motion001` with the URN `urn:ngsd-ld:Motion:001`\nand mapping the device reading `c` with the context attribute `count` (which is defined as an `Integer`)\nA `refStore` is defined as a `static_attribute`, placing the device within **Store** `urn:ngsi-ld:Store:001`"
					},
					"response": []
				},
				{
					"name": "Dummy Device  - Measurement",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "t|3"
						},
						"url": {
							"raw": "http://localhost:7896/iot/d?k=4jggokgpepnvsb2uv4s40d59ov&i=temperature001",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7896",
							"path": [
								"iot",
								"d"
							],
							"query": [
								{
									"key": "k",
									"value": "4jggokgpepnvsb2uv4s40d59ov"
								},
								{
									"key": "i",
									"value": "temperature001"
								}
							]
						},
						"description": "This example simulates a request coming from the device `motion001`\n\nThe request to the previously provisioned resource `iot/d` is in UltraLight 2.0 format\nand identifies the device `motion001` and passes a known API key.\n\nA similar request was made in the previous tutorial (before the IoT Agent was connected)\nwhen the door was unlocked, you will have seen the state of each motion sensor changing\nand a Northbound request will be logged in the device monitor."
					},
					"response": []
				},
				{
					"name": "Context Broker - Read the Temperature Sensor",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001"
							]
						},
						"description": "This example returns the data for the `Motion` entity with the `id=urn:ngsd-ld:Motion:001` within the context data.\n\nThe response shows that the device with `id=motion001` has been successfully identifed by the IoT Agent and mapped to the\nentity `id=urn:ngsd-ld:Motion:001`. This new entity has been created within the context data. The `c` \nattribute from the dummy device measurement request has been mapped to the more meaningful `count` attribute\nwithin the context. As you will notice, a `TimeInstant` attribute has been added to both the entity and the\nmeta data of the attribute - this represents the last time the entity and attribute have been updated, and is\nautomatically added to each new entity because the `IOTA_TIMESTAMP`  environment variable was set when the\nIoT Agent was started up. The `refStore` attribute comes from the `static_attributes` set when the device was provisioned."
					},
					"response": []
				},
				{
					"name": "Unprovisioned Dummy Device  - Measurement",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "c|1"
						},
						"url": {
							"raw": "http://localhost:7896/iot/d?k=4jggokgpepnvsb2uv4s40d59ov&i=motion003",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7896",
							"path": [
								"iot",
								"d"
							],
							"query": [
								{
									"key": "k",
									"value": "4jggokgpepnvsb2uv4s40d59ov"
								},
								{
									"key": "i",
									"value": "motion003"
								}
							]
						},
						"description": "This example simulates a request coming from the device `motion001`\n\nThe request to the previously provisioned resource `iot/d` is in UltraLight 2.0 format\nand identifies the device `motion001` and passes a known API key.\n\nA similar request was made in the previous tutorial (before the IoT Agent was connected)\nwhen the door was unlocked, you will have seen the state of each motion sensor changing\nand a Northbound request will be logged in the device monitor."
					},
					"response": []
				},
				{
					"name": "Context Broker - Read the Device provisioned by Service Group",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "NGSILD-Path",
								"value": "/"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/entities/?type=Device",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Device"
								}
							]
						},
						"description": "This example returns the data for the `Motion` entity with the `id=urn:ngsd-ld:Motion:001` within the context data.\n\nThe response shows that the device with `id=motion001` has been successfully identifed by the IoT Agent and mapped to the\nentity `id=urn:ngsd-ld:Motion:001`. This new entity has been created within the context data. The `c` \nattribute from the dummy device measurement request has been mapped to the more meaningful `count` attribute\nwithin the context. As you will notice, a `TimeInstant` attribute has been added to both the entity and the\nmeta data of the attribute - this represents the last time the entity and attribute have been updated, and is\nautomatically added to each new entity because the `IOTA_TIMESTAMP`  environment variable was set when the\nIoT Agent was started up. The `refStore` attribute comes from the `static_attributes` set when the device was provisioned."
					},
					"response": []
				},
				{
					"name": "IoT Agent - Provision an Actuator",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"water001\",\n      \"entity_name\": \"urn:ngsi-ld:Water:001\",\n      \"entity_type\": \"Water\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"HTTP\",\n      \"endpoint\": \"http://context-provider:3001/iot/water001\",\n      \"commands\": [ \n        {\n          \"name\": \"on\",\n          \"type\": \"command\"\n        },\n        {\n          \"name\": \"off\",\n          \"type\": \"command\"\n        }\n       ],\n       \"static_attributes\": [\n         {\"name\":\"controllingAsset\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Building:barn001\"}\n    \t]\n    }\n  ]\n}\n"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "Provisioning an actuator is similar to provisioning a sensor. This time an `endpoint` attribute holds\nthe location where the IoT Agent needs to send the UltraLight command and the `commands` array includes\na list of each command that can be invoked. The example below provisions a bell with the `deviceId=bell001`.\nThe endpoint is `http://context-provider:3001/iot/bell001` and it can accept the `ring` command."
					},
					"response": []
				},
				{
					"name": "IoT Agent - Invoke a Command",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/ngsi-ld/v1/entities/urn:ngsi-ld:Water:001/attrs/on",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Water:001",
								"attrs",
								"on"
							]
						},
						"description": "Before we wire-up the context broker, we can test that a command can be send to a device by making a REST request \ndirectly to the IoT Agent's North Port using the `/v1/updateContext` endpoint.\nIt is this endpoint that will eventually be invoked by the context broker once we have connected it up. \nTo test the configuration you can run the command directly as shown.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
					},
					"response": []
				},
				{
					"name": "IoT Agent - Provision a Filling Station",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"filling001\",\n      \"entity_name\": \"urn:ngsi-ld:FillingLevelSensor:001\",\n      \"entity_type\": \"FillingLevelSensor\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"HTTP\",\n      \"endpoint\": \"http://context-provider:3001/iot/filling001\",\n      \"commands\": [\n        {\n          \"name\": \"add\",\n          \"type\": \"command\"\n        },\n        {\n          \"name\": \"remove\",\n          \"type\": \"command\"\n        }\n      ],\n      \"attributes\": [\n        {\n          \"object_id\": \"f\",\n          \"name\": \"fillingLevel\",\n          \"type\": \"Number\",\n          \"metadata\": {\n            \"unitCode\": {\n              \"type\": \"Text\",\n              \"value\": \"CAL\"\n            }\n          }\n        }\n      ],\n       \"static_attributes\": [\n        {\n          \"name\": \"controllingAsset\",\n          \"type\": \"Relationship\",\n          \"value\": \"urn:ngsi-ld:Building:barn001\"\n        }\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "Provisioning  a device which offers both commands and measurements is merely a matter of making an HTTP POST request\nwith both `attributes` and `command` attributes in the body of the request.\n\nThis example provisions a smart door with four commands `lock`, `unlock`, `open` and `close` and maps a single attribute."
					},
					"response": []
				},
				{
					"name": "IoT Agent - Provision a Tractor",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"tractor001\",\n      \"entity_name\": \"urn:ngsi-ld:Tractor:001\",\n      \"entity_type\": \"Tractor\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"HTTP\",\n      \"endpoint\": \"http://context-provider:3001/iot/tractor001\",\n      \"commands\": [ \n        {\"name\": \"start\",\"type\": \"command\"},\n        {\"name\": \"stop\",\"type\": \"command\"}\n       ],\n       \"static_attributes\": [\n         {\"name\":\"controllingAsset\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Building:barn001\"}\n    \t]\n    }\n  ]\n}\n"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "Provisioning  a device which offers both commands and measurements is merely a matter of making an HTTP POST request\nwith both `attributes` and `command` attributes in the body of the request.\n\nThis example provisions a smart door with two commands `on` and `off` and maps two attributes."
					},
					"response": []
				},
				{
					"name": "IoT Agent - List all Provisioned Devices",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "This example lists all provisioned devices by making a GET request to the `/iot/devices` endpoint.\n\nThe response includes all the commands and attributes mappings associated with all provisioned IoT devices."
					},
					"response": []
				}
			],
			"description": "The IoT Agent acts as a middleware between the IoT devices and the context broker. It therefore\nneeds to be able to create context data entities with unique ids.  Once a service has been provisioned\nand an unknown device makes a measurement the IoT Agent add this to the context using the supplied\n`<device-id>` (unless the device is recognized and can be mapped to a known id.\n\nThere is no guarantee that every supplied IoT device `<device-id>` will always be unique, therefore \nall provisioning requests to the IoT Agent require two mandatory headers:\n\n* `fiware-service` header is defined so that entities for a given service can be held in a separate mongoDB database.\n* `fiware-servicepath` can be used to differenciate between arrays of devices. \n\nFor example within a smart city application you would expect different `fiware-service` headers for different\ndepartments (e.g. parks, transport, refuse collection etc.) and each `fiware-servicepath`  would refer to specific park \nand so on. This would mean that data and devices for each service can be identified and separated as needed, but the\ndata would not be siloed - for example data from a  **Smart Bin** within a park can be combined with the **GPS Unit** \nof a refuse truck to alter the route of the truck in an efficient manner. \n\nThe **Smart Bin** and **GPS Unit** are likely to come from different manufacturers and it cannot be \nguaranteed that that there is no overlap within `<device-ids>`s used. The use of the  `fiware-service` and\n`fiware-servicepath` headers can ensure that this is always the case, and allows the context broker to identify\nthe original source of the context data.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "661d9977-6eda-41bc-ab3a-5ab127cf21a5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1c47421c-2f50-4cee-add5-99cb44744a53",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Enabling Context Broker Commands",
			"item": [
				{
					"name": "Water Sprinker Commands",
					"item": [
						{
							"name": "Turn on the Irrigation System",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
								},
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Water:001/attrs/on",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Water:001",
										"attrs",
										"on"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Turn off the Irrigation System",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
								},
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Water:001/attrs/off",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Water:001",
										"attrs",
										"off"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Irrigation Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"name": "Accept"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Water:001",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Water:001"
									]
								},
								"description": "The result of the command to ring the bell can be read by querying the entity within the Orion Context Broker. \n\nThe `TimeInstant` shows last the time any command associated with the entity has been invoked. the result of `ring` command can be see in the value of the `ring_info` attribute"
							},
							"response": []
						}
					],
					"description": "The **Bell** entity has been mapped to `id=\"urn:ngsi-ld:Bell:001\"` with an entity `type=\"Bell\"`",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03f1d3da-6cdb-4a0a-bc49-3d970f1c4a06",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b157849-2b5c-42a6-b5f3-786fe212a846",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tractor Commands",
					"item": [
						{
							"name": "Start the Tractor",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
								},
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Tractor:001/attrs/start",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Tractor:001",
										"attrs",
										"start"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Stop the Tractor",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
								},
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Tractor:001/attrs/stop",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Tractor:001",
										"attrs",
										"stop"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Tractor Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									},
									{
										"key": "Accept",
										"name": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Tractor:001",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Tractor:001"
									]
								},
								"description": "The result of the command to ring the bell can be read by querying the entity within the Orion Context Broker. \n\nThe `TimeInstant` shows last the time any command associated with the entity has been invoked. the result of `ring` command can be see in the value of the `ring_info` attribute"
							},
							"response": []
						}
					],
					"description": "The **Bell** entity has been mapped to `id=\"urn:ngsi-ld:Bell:001\"` with an entity `type=\"Bell\"`",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "02d53c29-eb41-465b-a5dc-7269fc38fa1f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2fcfbcff-b0fb-41ea-88e0-0d116a2281de",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filling Station Commands",
					"item": [
						{
							"name": "Fill the barn",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
								},
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Filling:001/attrs/add",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Filling:001",
										"attrs",
										"add"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Empty the Barn",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\n\t\t\"type\": \"Property\", \n\t\t\"value\": \" \" \n\n}"
								},
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Filling:001/attrs/remove",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Filling:001",
										"attrs",
										"remove"
									]
								},
								"description": "To invoke the `ring` command, the `ring` attribute must be updated in the context.\n\nIf you are viewing the device monitor page, you can also see the state of the bell change.\n\n![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)"
							},
							"response": []
						},
						{
							"name": "Barn Filling Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "NGSILD-Tenant",
										"value": "openiot"
									},
									{
										"key": "NGSILD-Path",
										"value": "/",
										"disabled": true
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									},
									{
										"key": "Accept",
										"name": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Filling:001",
									"protocol": "http",
									"host": [
										"{{orion}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"urn:ngsi-ld:Filling:001"
									]
								},
								"description": "The result of the command to ring the bell can be read by querying the entity within the Orion Context Broker. \n\nThe `TimeInstant` shows last the time any command associated with the entity has been invoked. the result of `ring` command can be see in the value of the `ring_info` attribute"
							},
							"response": []
						}
					],
					"description": "The **Bell** entity has been mapped to `id=\"urn:ngsi-ld:Bell:001\"` with an entity `type=\"Bell\"`",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "84a9c5b1-6c63-40b5-a8db-aebc11eb0452",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6eb03db8-ca2f-47d1-a673-c92ce934768b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "List Provisioned Devices",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{orion}}/v2/entities/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							]
						},
						"description": "This example returns the data of all `Store` entities within the context data"
					},
					"response": []
				}
			],
			"description": "Having connected up the IoT Agent to the IoT devices, the Orion Context Broker was informed that the commands are\nnow available. In other words the IoT Agent registered itself as a\n[Context Provider](https://github.com/FIWARE/tutorials.Context-Providers/) for the command attributes.\n\nOnce the commands have been registered it will be possible to ring the **Bell**, open and close the **Smart Door** and\nswitch the **Smart Lamp** on and off by sending requests to the Orion Context Broker, rather than sending UltraLight 2.0\nrequests directly t the IoT devices as we did in the [previous tutorial](https://github.com/Fiware/tutorials.IoT-Sensors)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e5aa0b75-9618-464b-9547-bccf5360d530",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "862fb9fb-be99-4b36-bb84-8ec7f5638ede",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Service Group CRUD Actions",
			"item": [
				{
					"name": "Create a Service Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"services\": [\n   {\n     \"apikey\":      \"4jggokgpepnvsb2uv4s40d59ov\",\n     \"cbroker\":     \"http://orion:1026\",\n     \"entity_type\": \"Thing\",\n     \"resource\":    \"/iot/d\"\n   }\n ]\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							]
						},
						"description": "This example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices\nwill be sending messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)\n\nIn the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate\nthemselves by including the token `4jggokgpepnvsb2uv4s40d59ov`."
					},
					"response": []
				},
				{
					"name": "Read Service Group details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/services?resource=/iot/d",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							],
							"query": [
								{
									"key": "resource",
									"value": "/iot/d"
								}
							]
						},
						"description": "This example obtains the full details of a provisioned services with a given `resource` path.\n\nThe response includes all the defaults associated with the service group such as the `entity_type` and any default commands or attribute mappings.\n\nService group details can be read by making a GET request to the `/iot/services` endpoint and providing a `resource` parameter."
					},
					"response": []
				},
				{
					"name": "List all Service Groups",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/services",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							]
						},
						"description": "This example lists all provisioned services by making a GET request to the `/iot/services/` endpoint.\n\nThe response includes all the defaults associated with each service group such as the `entity_type` and any default commands or attribute mappings."
					},
					"response": []
				},
				{
					"name": "Update a Service Group",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_type\": \"IoT-Device\"\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/services?resource=/iot/d&apikey=4jggokgpepnvsb2uv4s40d59ov",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services"
							],
							"query": [
								{
									"key": "resource",
									"value": "/iot/d"
								},
								{
									"key": "apikey",
									"value": "4jggokgpepnvsb2uv4s40d59ov"
								}
							]
						},
						"description": "This example updates an existing service group with a given `resource` path and `apikey`\n\nService group details can be updated by making a PUT request to the `/iot/services` endpoint \nand providing a `resource` and `apikey` parameters."
					},
					"response": []
				},
				{
					"name": "Delete a Service Group",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/services/?resource=/iot/d&apikey=4jggokgpepnvsb2uv4s40d59ov",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"services",
								""
							],
							"query": [
								{
									"key": "resource",
									"value": "/iot/d",
									"description": "The path that the IoT Agent had been listening on"
								},
								{
									"key": "apikey",
									"value": "4jggokgpepnvsb2uv4s40d59ov"
								}
							]
						},
						"description": "This example removes a provisioned service group by making a DELETE request to the `/iot/services/` endpoint.\n\nIt means that requests to `http://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov`\n(where the IoT Agent is listening for **Northbound** communications) should no longer be processed by the IoT Agent. \nThe `apiKey` and `resource` parameters must be supplied in order to identify the service group to be deleted."
					},
					"response": []
				}
			],
			"description": "The **CRUD** operations for a service group map on to the expected HTTP verbs under the `/iot/services` endpoint\n\n* **Create** - HTTP POST\n* **Read** - HTTP GET\n* **Update** - HTTP PUT\n* **Delete** - HTTP DELETE\n\nUse the `resource` and `apikey` parameters to uniquely identify a service group.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a263bbb6-49c9-404b-8083-c75c37f2fc09",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c52a2169-d0c9-40b6-a77d-87b94b26db01",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Device CRUD Actions",
			"item": [
				{
					"name": "Create a Provisioned Device",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"bell002\",\n      \"entity_name\": \"urn:ngsi-ld:Bell:002\",\n      \"entity_type\": \"Bell\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"HTTP\",\n      \"endpoint\": \"http://context-provider:3001/iot/bell002\",\n      \"commands\": [ \n        {\n          \"name\": \"ring\",\n          \"type\": \"command\"\n        }\n       ],\n       \"static_attributes\": [\n         {\"name\":\"refStore\", \"type\": \"Relationship\",\"value\": \"urn:ngsi-ld:Store:002\"}\n    \t]\n    }\n  ]\n}\n"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "This example provisions an individual device. It maps the `device_id=bell002` to the entity URN `urn:ngsi-ld:Bell:002` and gives the\nentity a type `Bell`. The IoT Agent has been informed that the device offers a single `ring` `command` and is listening on \n`http://context-provider:3001/iot/bell002` using HTTP. `attributes`, `lazy` attributes and `static_attributes` can also be provisioned."
					},
					"response": []
				},
				{
					"name": "Read Provisioned Device Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices/bell002",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices",
								"bell002"
							]
						},
						"description": "This example obtains the full details of a provisioned device with a given `<device-id>` path.\n\nThe response includes all the commands and attributes mappings associated with the device\n\nProvisioned Device details can be read by making a GET request to the `/iot/devices/<device-id>` endpoint."
					},
					"response": []
				},
				{
					"name": "List all Provisioned Devices",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices"
							]
						},
						"description": "This example lists all provisioned devices by making a GET request to the `/iot/devices` endpoint.\n\nThe response includes all the commands and attributes mappings associated with all devices"
					},
					"response": []
				},
				{
					"name": "Update a Provisioned Device",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity_name\": \"urn:ngsi-ld:Thing:bell002\"\n}"
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices/bell002",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices",
								"bell002"
							]
						},
						"description": "This example updates an existing provisioned device by making a PUT request to the `/iot/devices/<device-id>` endpoint."
					},
					"response": []
				},
				{
					"name": "Delete a Provisioned Device",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{iot-agent}}/iot/devices/bell002",
							"protocol": "http",
							"host": [
								"{{iot-agent}}"
							],
							"path": [
								"iot",
								"devices",
								"bell002"
							]
						},
						"description": "This example removes a provisioned device by making a DELETE request to the `/iot/services/<device-id>` endpoint.\n\nThe device attributes will no longer be mapped and commands can no longer be sent to the device.\nIf the device is making active measurements, they will still be handled with default values\nif the associated service has not been deleted."
					},
					"response": []
				}
			],
			"description": "The **CRUD** operations for an individual device map on to the expected HTTP verbs under the `/iot/devices` endpoint\n\n* **Create** - HTTP POST\n* **Read** - HTTP GET\n* **Update** - HTTP PUT\n* **Delete** - HTTP DELETE\n\nUse the `<device-id>` to uniquely identify a device.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7d9ab7f8-ffa3-41ac-a686-e74ec2295c42",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c2f51cc7-59c3-42f5-806b-5d7d87d0125c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Upsert",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/ld+json",
						"type": "text"
					},
					{
						"key": "fiware-service",
						"value": "SmartGondor",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n        {\n            \"@context\": \"http://context.json-ld\",\n            \"pressure\": {\n                \"type\": \"Property\",\n                \"value\": 10\n            },\n            \"consumption_x\": {\n                \"type\": \"Property\",\n                \"value\": 200\n            },\n            \"id\": \"urn:ngsi-ld:Light:light1\",\n            \"type\": \"Light\"\n        }\n    ]\n"
				},
				"url": {
					"raw": "http://localhost:1026/ngsi-ld/v1/entityOperations/upsert/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1026",
					"path": [
						"ngsi-ld",
						"v1",
						"entityOperations",
						"upsert",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e64b3c59-ab46-46cf-b504-30a027ca2986",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "04676146-332d-41b3-a65e-b9fd5a527aca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7ebe8116-5e68-48b3-9b4c-3b970a4b8723",
			"key": "iot-agent",
			"value": "localhost:4041"
		},
		{
			"id": "01f249ad-00ad-4be9-8be3-115d586dc035",
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"id": "203503d1-d512-4334-baa6-e18683317093",
			"key": "ultralight",
			"value": "localhost:3001"
		},
		{
			"id": "512c8ba4-5493-4007-8483-1653048c4242",
			"key": "ngsi-context.jsonld",
			"value": "http://context-provider:3000/data-models/ngsi-context.jsonld"
		}
	],
	"protocolProfileBehavior": {}
}